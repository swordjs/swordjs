// Copyright Joyent and Node contributors. All rights reserved. MIT license.
'use strict'

import assert from 'node:assert'
import path from 'node:path'
import fs from 'node:fs'
import common from '../common'

import tmpdir from '../common/tmpdir'

const testDir = tmpdir.path
const filenameOne = 'watch.txt'

tmpdir.refresh()

const testsubdir = fs.mkdtempSync(testDir + path.sep)
const relativePathOne = path.join(path.basename(testsubdir), filenameOne)
const filepathOne = path.join(testsubdir, filenameOne)

if (!common.isOSX && !common.isWindows) {
  assert.throws(() => { fs.watch(testDir, { recursive: true }) },
    { code: 'ERR_FEATURE_UNAVAILABLE_ON_PLATFORM' })
  return
}
const watcher = fs.watch(testDir, { recursive: true })

let watcherClosed = false
watcher.on('change', (event, filename) => {
  assert.ok(event === 'change' || event === 'rename')

  // Ignore stale events generated by mkdir and other tests
  if (filename !== relativePathOne)
    return

  if (common.isOSX)
    clearInterval(interval)

  watcher.close()
  watcherClosed = true
})

let interval
if (common.isOSX) {
  interval = setInterval(() => {
    fs.writeFileSync(filepathOne, 'world')
  }, 10)
}
else {
  fs.writeFileSync(filepathOne, 'world')
}

process.on('exit', () => {
  assert(watcherClosed, 'watcher Object was not closed')
})
